what is working fine-

1)teh admin is able to login and go to his dasboard

2) teh admin is able to upload content and see it in his dashboard 

3) teh customer is able to purchase premium content through Razorpay

what needs to be done-

1)when refreshed it should not redirect admin or customer to login, it should check validity of  jwt token (it is done but you can check)

2)teh user controller and user routes are pending in backend 

3) teh customer should be able to see content details but should be able to download it only after registering and navigating to his dashboard

3) teh admin can add any subject or class  he wants, not some prewritten subjects or classes 

4)teh content added by admin should display in megamenu in frontend header to customer like-

Classes> MBA> Subject1> MCQs (we need something liek Testbook.com for whoel site)



// controllers/authController.js
const User = require("../models/User");
const jwt = require("jsonwebtoken");

const generateToken = (id) => {
	return jwt.sign({ id }, process.env.JWT_SECRET, {
		expiresIn: "30d",
	});
};

const register = async (req, res) => {
	console.log("Processing registration request...");
	try {
		const { name, email, password } = req.body;
		const userExists = await User.findOne({ email });

		if (userExists) {
			console.log("Registration failed: Email already exists");
			return res.status(400).json({ message: "User already exists" });
		}

		const user = await User.create({
			name,
			email,
			password,
		});

		console.log("User registered successfully");
		res.status(201).json({
			_id: user._id,
			name: user.name,
			email: user.email,
			isAdmin: user.isAdmin,
			token: generateToken(user._id),
		});
	} catch (error) {
		console.error("Registration error:", error);
		res.status(500).json({ message: "Server error" });
	}
};

const login = async (req, res) => {
	console.log("Processing login request...");
	try {
		const { email, password } = req.body;
		const user = await User.findOne({ email });

		if (user && (await user.matchPassword(password))) {
			console.log("Login successful");
			res.json({
				_id: user._id,
				name: user.name,
				email: user.email,
				isAdmin: user.isAdmin,
				token: generateToken(user._id),
			});
		} else {
			console.log("Login failed: Invalid credentials");
			res.status(401).json({ message: "Invalid email or password" });
		}
	} catch (error) {
		console.error("Login error:", error);
		res.status(500).json({ message: "Server error" });
	}
};

const getProfile = async (req, res) => {
	try {
		const user = await User.findById(req.user._id).select("-password");
		res.json(user);
	} catch (error) {
		res.status(500).json({ message: "Server error" });
	}
};

module.exports = { register, login, getProfile };

// controllers/contentController.js
const Content = require("../models/Content");

const uploadContent = async (req, res) => {
	console.log("Processing content upload...");
	try {
		const {
			title,
			description,
			type,
			subject,
			class: className,
			price,
			isFree,
		} = req.body;
		const fileUrl = req.file.path;

		const content = await Content.create({
			title,
			description,
			type,
			subject,
			class: className,
			fileUrl,
			price,
			isFree,
		});

		console.log("Content uploaded successfully");
		res.status(201).json(content);
	} catch (error) {
		console.error("Content upload error:", error);
		res.status(500).json({ message: "Server error" });
	}
};

const getContents = async (req, res) => {
	console.log("Fetching contents...");
	try {
		const filter = {};
		if (req.query.subject) filter.subject = req.query.subject;
		if (req.query.class) filter.class = req.query.class;
		if (req.query.type) filter.type = req.query.type;

		const contents = await Content.find(filter);
		console.log(`Found ${contents.length} contents`);
		res.json(contents);
	} catch (error) {
		console.error("Error fetching contents:", error);
		res.status(500).json({ message: "Server error" });
	}
};


const getContentById = async (req, res) => {
	try {
	  const content = await Content.findById(req.params.id);
	  if (!content) {
		return res.status(404).json({ message: "Content not found" });
	  }
  
	  const previewData = {
		title: content.title,
		description: content.description,
		type: content.type,
		subject: content.subject,
		class: content.class,
		price: content.price,
		isFree: content.isFree,
		previewUrl: content.previewUrl // Add this field to Content model
	  };
  
	  // Full content only for authenticated users
	  if (req.user) {
		previewData.fileUrl = content.fileUrl;
	  }
  
	  res.json(previewData);
	} catch (error) {
	  res.status(500).json({ message: "Server error" });
	}
  };

module.exports = { uploadContent, getContents, getContentById };

// middleware/auth.js
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
    console.log('Authenticating request...');
    try {
        let token;
        if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
            token = req.headers.authorization.split(' ')[1];
            const decoded = jwt.verify(token, process.env.JWT_SECRET);
            req.user = await User.findById(decoded.id).select('-password');
            console.log('User authenticated successfully');
            next();
        } else {
            console.log('No token found');
            res.status(401).json({ message: 'Not authorized, no token' });
        }
    } catch (error) {
        console.error('Authentication error:', error);
        res.status(401).json({ message: 'Not authorized, token failed' });
    }
};

const admin = (req, res, next) => {
    console.log('Checking admin privileges...');
    if (req.user && req.user.isAdmin) {
        console.log('Admin access granted');
        next();
    } else {
        console.log('Admin access denied');
        res.status(401).json({ message: 'Not authorized as admin' });
    }
};

module.exports = { protect, admin };

// middleware/upload.js
const multer = require('multer');
const path = require('path');

const storage = multer.diskStorage({
    destination: function(req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function(req, file, cb) {
        console.log('Uploading file:', file.originalname);
        cb(null, `${Date.now()}-${file.originalname}`);
    }
});

const upload = multer({
    storage: storage,
    fileFilter: function(req, file, cb) {
        const filetypes = /pdf|doc|docx|mp4|jpeg|jpg|png/;
        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
        if (extname) {
            console.log('File type accepted');
            return cb(null, true);
        } else {
            console.log('File type rejected');
            cb('Error: Invalid file type!');
        }
    }
});

module.exports = upload;

// models/Content.js
const mongoose = require("mongoose");

const contentSchema = new mongoose.Schema(
	{
		title: {
			type: String,
			required: true,
		},
		description: {
			type: String,
			required: true,
		},
		type: {
			type: String,
			enum: ["test_series", "previous_year", "pdf", "video"],
			required: true,
		},
		subject: {
			type: String,
			required: true,
		},
		class: {
			type: String,
			required: true,
		},
		fileUrl: {
			type: String,
			required: true,
		},
		price: {
			type: Number,
			required: true,
		},
		isFree: {
			type: Boolean,
			default: false,
		},
		previewUrl: {
			type: String,
		},
	},
	{
		timestamps: true,
	}
);

const Content = mongoose.model("Content", contentSchema);
module.exports = Content;

//usermodel

const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique: true
    },
    password: {
        type: String,
        required: true
    },
    isAdmin: {
        type: Boolean,
        default: false
    },
    purchasedContent: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Content'
    }]
}, {
    timestamps: true
});

userSchema.pre('save', async function(next) {
    if (!this.isModified('password')) {
        next();
    }
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
});

userSchema.methods.matchPassword = async function(enteredPassword) {
    return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model('User', userSchema);
module.exports = User;

// models/Order.js
const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        required: true,
        ref: 'User'
    },
    content: {
        type: mongoose.Schema.Types.ObjectId,
        required: true,
        ref: 'Content'
    },
    razorpayOrderId: {
        type: String,
        required: true
    },
    razorpayPaymentId: {
        type: String
    },
    isPaid: {
        type: Boolean,
        default: false
    },
    paidAt: {
        type: Date
    },
    amount: {
        type: Number,
        required: true
    }
}, {
    timestamps: true
});

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;

// backend/routes/authRoutes.js
const express = require('express');
const router = express.Router();
const { register, login, getProfile } = require('../controllers/authController');
const { protect } = require('../middleware/auth');

router.post('/register', register);
router.post('/login', login);
router.get('/profile', protect, getProfile);  // Use this instead of /verify

module.exports = router;

// routes/contentRoutes.js
const express = require('express');
const router = express.Router();
const { protect, admin } = require('../middleware/auth');
const upload = require('../middleware/upload');
const { uploadContent, getContents, getContentById } = require('../controllers/contentController');

router.post('/', protect, admin, upload.single('file'), uploadContent);
router.get('/', getContents);
router.get('/:id', protect, getContentById);

module.exports = router;

// server.js
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const connectDB = require('./config/db');
const authRoutes = require('./routes/authRoutes');
const contentRoutes = require('./routes/contentRoutes');
const paymentRoutes = require('./routes/paymentRoutes');

const app = express();

// Connect to database
connectDB();

// Middleware
app.use(cors());
app.use(express.json());
app.use('/uploads', express.static('uploads'));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/content', contentRoutes);
app.use('/api/payment', paymentRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});


//frontend
// src/utils/authUtils.js
export const setAuthToken = (token) => {
    console.log('Setting auth token');
    localStorage.setItem('token', token);
  };
  
  export const getAuthToken = () => {
    console.log('Getting auth token');
    return localStorage.getItem('token');
  };
  
  export const removeAuthToken = () => {
    console.log('Removing auth token');
    localStorage.removeItem('token');
  };
  
  export const isAuthenticated = () => {
    console.log('Checking authentication status');
    return !!getAuthToken();
  };

// src/utils/api.js
import axios from 'axios';

const API_URL = 'http://localhost:5000/api';

const api = axios.create({
  baseURL: API_URL,
});

// Request interceptor for adding auth token
api.interceptors.request.use(
  (config) => {
    console.log('Making API request:', config.url);
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    console.error('API request error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor for handling errors
api.interceptors.response.use(
  (response) => {
    console.log('API response received:', response.config.url);
    return response;
  },
  (error) => {
    console.error('API response error:', error);
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;

import React, { createContext, useState, useContext, useEffect } from "react";
import api from "../utils/api";

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const initializeAuth = async () => {
            const token = localStorage.getItem("token");
            if (token) {
                try {
                    const response = await api.get("/auth/profile");
                    setUser(response.data);
                } catch (error) {
                    localStorage.removeItem("token");
                }
            }
            setLoading(false);
        };

        initializeAuth();
    }, []);

	const login = async (email, password) => {
		console.log("Attempting login");
		try {
			const response = await api.post("/auth/login", { email, password });
			const { token, ...userData } = response.data;
			localStorage.setItem("token", token);
			setUser(userData);
			console.log("Login successful", userData);
			return response.data;
		} catch (error) {
			console.error("Login error:", error);
			throw error;
		}
	};

	const register = async (userData) => {
		console.log("Attempting registration");
		try {
			const response = await api.post("/auth/register", userData);
			const { token, ...user } = response.data;
			localStorage.setItem("token", token);
			setUser(user);
			console.log("Registration successful");
			return response.data;
		} catch (error) {
			console.error("Registration error:", error);
			throw error;
		}
	};

	const logout = () => {
		console.log("Logging out");
		localStorage.removeItem("token");
		setUser(null);
	};

	return (
		<AuthContext.Provider value={{ user, login, register, logout, loading }}>
			{children}
		</AuthContext.Provider>
	);
};

export const useAuth = () => {
	const context = useContext(AuthContext);
	if (!context) {
		throw new Error("useAuth must be used within an AuthProvider");
	}
	return context;
};

// src/components/auth/Register.js
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";
import {
	Container,
	Paper,
	TextField,
	Button,
	Typography,
	Box,
	Alert,
} from "@mui/material";
import { GoogleLogin } from "@react-oauth/google";

const Register = () => {
	const [formData, setFormData] = useState({
		name: "",
		email: "",
		password: "",
		confirmPassword: "",
	});
	const [error, setError] = useState("");
	const [loading, setLoading] = useState(false);
	const navigate = useNavigate();
	const { register } = useAuth();

	console.log("Rendering Register component");

	const handleChange = (e) => {
		const { name, value } = e.target;
		setFormData((prev) => ({
			...prev,
			[name]: value,
		}));
	};

	const handleSubmit = async (e) => {
		e.preventDefault();
		console.log("Attempting registration for:", formData.email);

		if (formData.password !== formData.confirmPassword) {
			setError("Passwords do not match");
			return;
		}

		try {
			setError("");
			setLoading(true);
			await register({
				name: formData.name,
				email: formData.email,
				password: formData.password,
			});
			console.log("Registration successful, redirecting...");
			navigate("/");
		} catch (err) {
			console.error("Registration error:", err);
			setError("Failed to create an account.");
		} finally {
			setLoading(false);
		}
	};

	return (
		<Container maxWidth='sm'>
			<Paper elevation={3} sx={{ p: 4, mt: 4 }}>
				<Typography variant='h4' component='h1' gutterBottom>
					Register
				</Typography>

				{error && (
					<Alert severity='error' sx={{ mb: 2 }}>
						{error}
					</Alert>
				)}

				<Box component='form' onSubmit={handleSubmit}>
					<TextField
						fullWidth
						label='Name'
						name='name'
						value={formData.name}
						onChange={handleChange}
						margin='normal'
						required
					/>

					<TextField
						fullWidth
						label='Email'
						name='email'
						type='email'
						value={formData.email}
						onChange={handleChange}
						margin='normal'
						required
					/>

					<TextField
						fullWidth
						label='Password'
						name='password'
						type='password'
						value={formData.password}
						onChange={handleChange}
						margin='normal'
						required
					/>

					<TextField
						fullWidth
						label='Confirm Password'
						name='confirmPassword'
						type='password'
						value={formData.confirmPassword}
						onChange={handleChange}
						margin='normal'
						required
					/>

					<Button
						type='submit'
						variant='contained'
						fullWidth
						sx={{ mt: 3 }}
						disabled={loading}>
						{loading ? "Creating Account..." : "Register"}
					</Button>
					<GoogleLogin/>
				</Box>
			</Paper>
		</Container>
	);
};

export default Register;

//private route
import React from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

const PrivateRoute = ({ children }) => {
	const { user, loading } = useAuth();

	// Check localStorage for token if user is not set
	if (!user && localStorage.getItem("token") && !loading) {
		// Delay rendering to allow `AuthContext` to initialize
		return <div>Loading...</div>;
	}

	console.log("PrivateRoute - User:", user, "Loading:", loading);

	if (loading) {
		return <div>Loading...</div>;
	}

	return user ? children : <Navigate to='/login' />;
};

export default PrivateRoute;

// src/components/auth/Login.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import {
  Container,
  Paper,
  TextField,
  Button,
  Typography,
  Box,
  Alert,
} from '@mui/material';
import { GoogleLogin } from '@react-oauth/google';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { login } = useAuth();

  console.log('Rendering Login component');

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log('Attempting login with email:', email);
    
    try {
      setError('');
      setLoading(true);
      await login(email, password);
      console.log('Login successful, redirecting...');
      navigate('/admin/dash');
    } catch (err) {
      console.error('Login error:', err);
      setError('Failed to login. Please check your credentials.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="sm">
      <Paper elevation={3} sx={{ p: 4, mt: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Login
        </Typography>
        
        {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
        
        <Box component="form" onSubmit={handleSubmit}>
          <TextField
            fullWidth
            label="Email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            margin="normal"
            required
          />
          
          <TextField
            fullWidth
            label="Password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            margin="normal"
            required
          />
          
          <Button
            type="submit"
            variant="contained"
            fullWidth
            sx={{ mt: 3 }}
            disabled={loading}
          >
            {loading ? 'Logging in...' : 'Login'}
          </Button>
          <GoogleLogin/>
        </Box>
      </Paper>
    </Container>
  );
};

export default Login;

// src/components/admin/ContentUpload.jsx
import React, { useState } from 'react';
import {
  Paper,
  TextField,
  Button,
  Typography,
  Box,
  MenuItem,
  Alert,
  CircularProgress
} from '@mui/material';
import api from '../../utils/api';

const ContentUpload = () => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: '',
    subject: '',
    class: '',
    price: '',
    isFree: false,
  });
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const contentTypes = ['test_series', 'previous_year', 'pdf', 'video'];
  const subjects = ['Mathematics', 'Physics', 'Chemistry', 'Biology'];
  const classes = ['Class 9', 'Class 10', 'Class 11', 'Class 12'];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    const formDataToSend = new FormData();
    Object.keys(formData).forEach(key => {
      formDataToSend.append(key, formData[key]);
    });
    formDataToSend.append('file', file);

    try {
      await api.post('/content', formDataToSend, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      setSuccess('Content uploaded successfully!');
      setFormData({
        title: '',
        description: '',
        type: '',
        subject: '',
        class: '',
        price: '',
        isFree: false,
      });
      setFile(null);
    } catch (err) {
      setError(err.response?.data?.message || 'Error uploading content');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Paper elevation={3} sx={{ p: 4 }}>
      <Typography variant="h5" gutterBottom>
        Upload New Content
      </Typography>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
      {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}

      <Box component="form" onSubmit={handleSubmit}>
        <TextField
          fullWidth
          label="Title"
          name="title"
          value={formData.title}
          onChange={handleChange}
          margin="normal"
          required
        />

        <TextField
          fullWidth
          label="Description"
          name="description"
          value={formData.description}
          onChange={handleChange}
          margin="normal"
          multiline
          rows={4}
          required
        />

        <TextField
          fullWidth
          select
          label="Type"
          name="type"
          value={formData.type}
          onChange={handleChange}
          margin="normal"
          required
        >
          {contentTypes.map((option) => (
            <MenuItem key={option} value={option}>
              {option.replace('_', ' ').toUpperCase()}
            </MenuItem>
          ))}
        </TextField>

        <TextField
          fullWidth
          select
          label="Subject"
          name="subject"
          value={formData.subject}
          onChange={handleChange}
          margin="normal"
          required
        >
          {subjects.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>

        <TextField
          fullWidth
          select
          label="Class"
          name="class"
          value={formData.class}
          onChange={handleChange}
          margin="normal"
          required
        >
          {classes.map((option) => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </TextField>

        <TextField
          fullWidth
          label="Price"
          name="price"
          type="number"
          value={formData.price}
          onChange={handleChange}
          margin="normal"
          required
        />

        <Box sx={{ mt: 2, mb: 2 }}>
          <input
            type="file"
            onChange={handleFileChange}
            required
            accept=".pdf,.doc,.docx,.mp4"
          />
        </Box>

        <Button
          type="submit"
          variant="contained"
          fullWidth
          sx={{ mt: 3 }}
          disabled={loading}
        >
          {loading ? <CircularProgress size={24} /> : 'Upload Content'}
        </Button>
      </Box>
    </Paper>
  );
};

export default ContentUpload;

// src/components/admin/Dashboard.jsx
import React, { useState } from "react";
import { Routes, Route, Link } from "react-router-dom";
import {
	Container,
	Grid,
	Paper,
	Typography,
	Box,
	Tabs,
	Tab,
} from "@mui/material";
import ContentUpload from "./ContentUpload";
import UserManagement from "./UserManagement";
import ContentManagement from "./ContentManagement";

const Dashboard = () => {
	const [value, setValue] = useState(0);

	const handleChange = (event, newValue) => {
		setValue(newValue);
	};

	return (
		<Container maxWidth='lg' sx={{ mt: 4, mb: 4 }}>
			<Typography variant='h4' sx={{ mb: 4 }}>
				Admin Dashboard
			</Typography>

			<Box sx={{ borderBottom: 1, borderColor: "divider", mb: 3 }}>
				<Tabs value={value} onChange={handleChange}>
					<Tab label='Content Upload' component={Link} to='/upload' />
					<Tab label='Content Management' component={Link} to='/contentManage' />
					<Tab label='User Management' component={Link} to='/userManage' />
				</Tabs>
			</Box>

			<Routes>
				<Route path='' element={<ContentUpload />} />
				<Route path='/contentManage' element={<ContentManagement />} />
				<Route path="='/userManage" element={<UserManagement />} />
			</Routes>
		</Container>
	);
};

export default Dashboard;

// src/components/admin/ContentManagement.jsx
import React, { useState, useEffect } from "react";
import {
	Paper,
	Table,
	TableBody,
	TableCell,
	TableContainer,
	TableHead,
	TableRow,
	Typography,
	Button,
	Alert,
	CircularProgress,
	IconButton,
} from "@mui/material";
import { Delete, Edit } from "@mui/icons-material";
import api from "../../utils/api";

const ContentManagement = () => {
	const [contents, setContents] = useState([]);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState("");

	useEffect(() => {
		fetchContents();
	}, []);

	const fetchContents = async () => {
		try {
			const response = await api.get("/content");
			setContents(response.data);
		} catch (err) {
			setError("Failed to fetch contents");
		} finally {
			setLoading(false);
		}
	};

	const handleDelete = async (id) => {
		if (window.confirm("Are you sure you want to delete this content?")) {
			try {
				await api.delete(`/content/${id}`);
				setContents(contents.filter((content) => content._id !== id));
			} catch (err) {
				setError("Failed to delete content");
			}
		}
	};

	if (loading) return <CircularProgress />;

	return (
		<Paper elevation={3} sx={{ p: 4 }}>
			<Typography variant='h5' gutterBottom>
				Content Management
			</Typography>

			{error && (
				<Alert severity='error' sx={{ mb: 2 }}>
					{error}
				</Alert>
			)}

			<TableContainer>
				<Table>
					<TableHead>
						<TableRow>
							<TableCell>Title</TableCell>
							<TableCell>Type</TableCell>
							<TableCell>Subject</TableCell>
							<TableCell>Class</TableCell>
							<TableCell>Price</TableCell>
							<TableCell>Actions</TableCell>
						</TableRow>
					</TableHead>
					<TableBody>
						{contents.map((content) => (
							<TableRow key={content._id}>
								<TableCell>{content.title}</TableCell>
								<TableCell>{content.type}</TableCell>
								<TableCell>{content.subject}</TableCell>
								<TableCell>{content.class}</TableCell>
								<TableCell>₹{content.price}</TableCell>
								<TableCell>
									<IconButton color='primary'>
										<Edit />
									</IconButton>
									<IconButton
										color='error'
										onClick={() => handleDelete(content._id)}>
										<Delete />
									</IconButton>
								</TableCell>
							</TableRow>
						))}
					</TableBody>
				</Table>
			</TableContainer>
		</Paper>
	);
};

export default ContentManagement;

// src/components/admin/UserManagement.jsx
import React, { useState, useEffect } from 'react';
import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Typography,
  Alert,
  CircularProgress,
  IconButton,
  Switch,
} from '@mui/material';
import { Delete } from '@mui/icons-material';
import api from '../../utils/api';

const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchUsers();
  }, []);

  const fetchUsers = async () => {
    try {
      const response = await api.get('/users');
      setUsers(response.data);
    } catch (err) {
      setError('Failed to fetch users');
    } finally {
      setLoading(false);
    }
  };

  const handleAdminToggle = async (userId, currentStatus) => {
    try {
      await api.put(`/users/${userId}`, { isAdmin: !currentStatus });
      setUsers(users.map(user => 
        user._id === userId 
          ? { ...user, isAdmin: !currentStatus }
          : user
      ));
    } catch (err) {
      setError('Failed to update user status');
    }
  };

  const handleDelete = async (userId) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      try {
        await api.delete(`/users/${userId}`);
        setUsers(users.filter(user => user._id !== userId));
      } catch (err) {
        setError('Failed to delete user');
      }
    }
  };

  if (loading) return <CircularProgress />;

  return (
    <Paper elevation={3} sx={{ p: 4 }}>
      <Typography variant="h5" gutterBottom>
        User Management
      </Typography>

      {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}

      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Email</TableCell>
              <TableCell>Admin Status</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user._id}>
                <TableCell>{user.name}</TableCell>
                <TableCell>{user.email}</TableCell>
                <TableCell>
                  <Switch
                    checked={user.isAdmin}
                    onChange={() => handleAdminToggle(user._id, user.isAdmin)}
                    color="primary"
                  />
                </TableCell>
                <TableCell>
                  <IconButton 
                    color="error"
                    onClick={() => handleDelete(user._id)}
                  >
                    <Delete />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </Paper>
  );
};

export default UserManagement;(it is not showing users as backedn is not complete)

// src/App.js
import React from "react";
import "./App.css";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import Header from "./components/layout/Header";
import Footer from "./components/layout/Footer";
import Login from "./components/auth/Login";
import Register from "./components/auth/Register";
import ContentList from "./components/content/ContentList";
import ContentDetails from "./components/content/ContentDetails";
import Dashboard from "./components/admin/Dashboard";
import PrivateRoute from "./components/auth/PrivateRoute";
import ContentUpload from "./components/admin/ContentUpload";
import ContentManagement from "./components/admin/ContentManagement";
import UserManagement from "./components/admin/UserManagement";
import PaymentGateway from "./components/payment/PaymentGateway";
import { GoogleOAuthProvider } from "@react-oauth/google";

function App() {
	console.log("Rendering App component");
	return (
		<GoogleOAuthProvider clientId='560380482369-alvc0d9idqi3vbqknbihafv9clrl2ouj.apps.googleusercontent.com'>
			<AuthProvider>
				<Router>
					<div className='app'>
						<Header />
						<main className='main-content'>
							<Routes>
								<Route path='/' element={<ContentList />} />
								<Route path='/login' element={<Login />} />
								<Route path='/register' element={<Register />} />
								<Route path='/content/:id' element={<ContentDetails />} />
								{/* <Route path='/upload' element={<ContentUpload />} /> */}
								<Route
									path='/admin/dash'
									element={
										<PrivateRoute>
											<Dashboard />
										</PrivateRoute>
									}
								/>
								<Route
									path='/upload'
									element={
										<PrivateRoute>
											<ContentUpload />
										</PrivateRoute>
									}
								/>
								<Route
									path='/contentManage'
									element={
										<PrivateRoute>
											<ContentManagement />
										</PrivateRoute>
									}
								/>
								<Route
									path='/userManage'
									element={
										<PrivateRoute>
											<UserManagement />
										</PrivateRoute>
									}
								/>
								<Route path='/payment' element={<PaymentGateway />}></Route>
							</Routes>
						</main>
						<Footer />
					</div>
				</Router>
			</AuthProvider>
		</GoogleOAuthProvider>
	);
}

export default App;

